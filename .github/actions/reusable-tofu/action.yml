name: Resuable OpenTofu Workflow

inputs:
  uniq-name:
    description: "A distinct name that doesn't match other names"
    required: true
    type: string
  working-directory:
    required: true
    type: string
  github-token:
    description: 'Github Token. Action cannot inherit secrets so this value must be passed'
    required: true

runs:
  using: "composite"
  steps:
    - uses: opentofu/setup-opentofu@v1

    - name: OpenTofu fmt
      id: fmt
      run: tofu fmt -check
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
      continue-on-error: true

    - name: OpenTofu Init
      id: init
      run: tofu init
      shell: bash
      working-directory: "${{ inputs.working-directory }}"

    - name: OpenTofu Validate
      id: validate
      run: tofu validate -no-color
      shell: bash
      working-directory: "${{ inputs.working-directory }}"

    - name: OpenTofu Plan
      id: plan
      run: timeout 300s tofu plan -no-color
      shell: bash
      working-directory: "${{ inputs.working-directory }}"
      continue-on-error: true

#    - name: OpenTofu Apply On Push
#      if: github.event_name == 'push'
#      id: apply
#      run: timeout 60s tofu apply -no-color
#      shell: bash
#      working-directory: "${{ inputs.working-directory }}"

    - uses: actions/github-script@v6
      continue-on-error: true
      if: github.event_name == 'pull_request'
      env:
        PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('${{ inputs.uniq-name }}')
          })
          
          // 2. Prepare format of the comment
          const output = `### ${{ inputs.uniq-name }}
          #### OpenTofu Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
          
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          
          </details>
          
          #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }